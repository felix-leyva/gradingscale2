package de.felixlf.gradingscale2.entities

import app.cash.molecule.RecompositionMode
import app.cash.molecule.launchMolecule
import app.cash.turbine.TurbineTestContext
import app.cash.turbine.test
import de.felixlf.gradingscale2.entities.uimodel.UIModel
import kotlinx.coroutines.cancelChildren
import kotlinx.coroutines.test.TestScope
import kotlinx.coroutines.test.runTest
import kotlin.coroutines.CoroutineContext
import kotlin.coroutines.EmptyCoroutineContext
import kotlin.time.Duration
import kotlin.time.Duration.Companion.seconds

/**
 * Helper function to run a test with a molecule test scope.
 * This function will automatically cancel all children coroutines after the test has finished.
 */
fun moleculeTest(
    context: CoroutineContext = EmptyCoroutineContext,
    timeout: Duration = 60.seconds,
    testBody: suspend TestScope.() -> Unit,
) = runTest(
    context = context,
    timeout = timeout,
) {
    testBody()
    coroutineContext.cancelChildren()
}

/**
 * Helper function which helps test UIModels with molecule.
 * We should not use the uiState, as that is automatically generated by a molecule using RecompositionMode.ContextClock, which is not
 * available in the TestScope, so an exception would be thrown.
 * For tests, it is easier using instead the Immediate mode.
 */
suspend fun <UIState, UICommand, UIEvent> TestScope.testMoleculeFlow(
    uiModel: UIModel<UIState, UICommand, UIEvent>,
    validate: suspend TurbineTestContext<UIState>.() -> Unit
) = launchMolecule(mode = RecompositionMode.Immediate, body = { uiModel.produceUI() }).test(validate = validate)
